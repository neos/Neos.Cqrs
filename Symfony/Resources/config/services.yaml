services:

  # TODO: this should be configured "PER BOUNDED CONTEXT" (analogous to how Doctrine DBAL connections are handled)
  Neos\EventSourcing\EventStore\EventStore:
    alias: neos_eventsourcing_eventstore

  neos_eventsourcing_eventstore:
    class: Neos\EventSourcing\EventStore\EventStore
    arguments:
      $storage: "@neos_eventsourcing_storage_eventStorageInterface"
      $eventPublisher: "@neos_eventsourcing_eventPublisher"
      $eventNormalizer: "@neos_eventsourcing_eventStore_eventNormalizer"
    public: true

  neos_eventsourcing_storage_eventStorageInterface:
    alias: neos_eventsourcing_storage_doctrine_doctrineEventStorage

  neos_eventsourcing_storage_doctrine_doctrineEventStorage:
    class: Neos\EventSourcing\EventStore\Storage\Doctrine\DoctrineEventStorage
    arguments:
      $options: []
      #  eventTableName:
      $eventNormalizer: "@neos_eventsourcing_eventStore_eventNormalizer"
      $connection: "@Doctrine\\DBAL\\Driver\\Connection"

  neos_eventsourcing_event_eventTypeResolver:
    class: Neos\EventSourcing\Event\Resolver\FullyQualifiedClassNameResolver

  neos_eventsourcing_eventStore_eventNormalizer:
    class: Neos\EventSourcing\EventStore\EventNormalizer
    arguments:
      $eventTypeResolver: "@neos_eventsourcing_event_eventTypeResolver"

  neos_eventsourcing_eventPublisher:
    class: Neos\EventSourcing\EventPublisher\NoopEventPublisher

  neos_eventsourcing_symfony_command_setupCommand:
    class: Neos\EventSourcing\Symfony\Command\SetupCommand
    tags: ["console.command"]
    arguments:
      $eventStore: "@neos_eventsourcing_eventstore"